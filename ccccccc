// Arreglo para almacenar los productos del carrito
let carrito = [];

function agregarAlCarrito() {
    const nombreProducto = document.querySelector('#nombreProducto').value;
    const laboratorio = document.querySelector('#laboratorio').value;
    const unidad = document.querySelector('#unidad').value; // Formato
    const presentacion = document.querySelector('#presentacion').value;
    const dosis = document.querySelector('#dosis').value;
    const precio = parseFloat(document.querySelector('#precio').value);
    const cantidad = parseInt(document.querySelector('#cantidad').value);

    const imagenProducto = document.querySelector('#imagenProducto').src;
    const nombreImagen = imagenProducto.split('/').pop();
    const rutaImagen = '../../dist/assets/img-medicamentos/' + nombreImagen;

    const nombreCliente = document.querySelector('#nombreCliente').value;
    const cedulaCliente = document.querySelector('#cedulaCliente').value;

    // Validaci√≥n b√°sica
    if (!nombreProducto || !laboratorio || !unidad || !presentacion || !dosis || !precio || !cantidad) {
        alert('Por favor, complete todos los campos del producto.');
        return;
    }

    if (!nombreCliente || !cedulaCliente) {
        alert('Por favor, complete los campos del cliente.');
        return;
    }

    // üîí Verificar si ya existe un producto con misma presentaci√≥n, dosis y unidad
    const yaExiste = carrito.some(producto =>
        producto.presentacion.trim().toLowerCase() === presentacion.trim().toLowerCase() &&
        producto.dosis.trim().toLowerCase() === dosis.trim().toLowerCase() &&
        producto.unidad.trim().toLowerCase() === unidad.trim().toLowerCase()
    );

    if (yaExiste) {
        alert('Ya existe un producto con la misma presentaci√≥n, dosis y formato en el carrito.');
        return;
    }

    // Crear el objeto producto
    const producto = {
        nombreProducto,
        laboratorio,
        unidad,
        presentacion,
        dosis,
        precio,
        cantidad,
        imagen: rutaImagen,
        clienteNombre: nombreCliente,
        clienteCedula: cedulaCliente
    };

    // Agregar al carrito
    carrito.push(producto);



    // Actualizar el contador del carrito
    actualizarContador();

    // Mostrar mensaje de √©xito
    mostrarNotificacion(rutaImagen, nombreProducto);  // Pasamos la imagen y el nombre del producto
}

// Funci√≥n para mostrar la notificaci√≥n de producto agregado
function mostrarNotificacion(imagen, nombreProducto) {
    const notificacion = document.getElementById('notificacion');
    const icono = notificacion.querySelector('.imagen-icono'); // Seleccionamos el elemento donde se mostrar√° la imagen
    const texto = notificacion.querySelector('span'); // Seleccionamos el texto de la notificaci√≥n

    // Establecemos la imagen del producto en el icono
    icono.src = imagen;
    texto.textContent = `El producto "${nombreProducto}" se agreg√≥ al carrito de compras.`;  // Cambiamos el texto

    // Mostrar la notificaci√≥n
    notificacion.classList.add('show');
    notificacion.style.display = 'flex';

    // Ocultar la notificaci√≥n despu√©s de 3 segundos
    setTimeout(function () {
        notificacion.classList.remove('show'); // Remover la animaci√≥n
        notificacion.style.display = 'none';
    }, 4000);
}


// Funci√≥n para actualizar el contador del carrito
function actualizarContador() {
    document.getElementById('contadorCarrito').textContent = carrito.length;
}

// Funci√≥n para mostrar el carrito en el modal
function mostrarCarrito() {
    const modalCarrito = document.getElementById('mostarCarrito');
    const contenidoCarrito = modalCarrito.querySelector('.modal-body');
    contenidoCarrito.innerHTML = ''; // Limpiar el contenido previo

    let totalGeneral = 0;

    carrito.forEach((producto, index) => {
        const totalProducto = producto.precio * producto.cantidad;
        totalGeneral += totalProducto;

        const productoHTML = `
        <div class="d-flex justify-content-between align-items-center">
            <!-- Imagen del producto -->
            <img src="${producto.imagen}" alt="${producto.nombreProducto}" class="img-fluid" style="width: 100px;">
            
            <div class="flex-grow-1 ms-3">
                <h5 class="fw-bold text-primary mb-1">${producto.nombreProducto}</h5>

                <h6 class="fw-bold text-primary">Precio unitario: C$${producto.precio.toFixed(2)}</h6>
    
                <!-- Solo muestra Presentaci√≥n si tiene un valor v√°lido -->
                ${producto.presentacion && producto.presentacion !== "Seleccione una opci√≥n" ?
                `<p class="mb-1"><strong>Presentaci√≥n:</strong> ${producto.presentacion}</p>` : ''}
                
                <!-- Solo muestra Dosis si tiene un valor v√°lido -->
                ${producto.dosis && producto.dosis !== "Seleccione una opci√≥n" ?
                `<p class="mb-1"><strong>Dosis:</strong> ${producto.dosis}</p>` : ''}
                
                <!-- Solo muestra Formato si tiene un valor v√°lido -->
                ${producto.unidad && producto.unidad !== "Seleccione una opci√≥n" ?
                `<p class="mb-1"><strong>Formato:</strong> ${producto.unidad}</p>` : ''}

                <div class="d-flex align-items-center mt-1">
                    <button class="btn btn-outline-primary btn-sm" onclick="updateQuantity(${index}, -1)">-</button>
                    <input type="text" class="form-control mx-2 text-center" value="${producto.cantidad}" style="width: 40px;" readonly>
                    <button class="btn btn-outline-primary btn-sm" onclick="updateQuantity(${index}, 1)">+</button>
                </div>
            </div>
    
            <div class="d-flex flex-column align-items-end">
                <span class="fw-bold text-success mb-2">Subtotal: C$${totalProducto.toFixed(2)}</span>
                <button class="btn btn-danger btn-sm" onclick="removeProduct(${index})">üóë</button>
            </div>
        </div>
        <hr>
    `;



        contenidoCarrito.insertAdjacentHTML('beforeend', productoHTML);
    });

    document.getElementById('grandTotal').textContent = `C$${totalGeneral.toFixed(2)}`;

    // Mostrar el modal
    const modal = bootstrap.Modal.getOrCreateInstance(modalCarrito);
    modal.show();

}

// Funci√≥n para actualizar la cantidad de un producto en el carrito
function updateQuantity(index, cantidadCambio) {
    const producto = carrito[index];
    producto.cantidad += cantidadCambio;

    // Evitar que la cantidad sea menor a 1
    if (producto.cantidad < 1) producto.cantidad = 1;

    // Volver a mostrar el carrito
    mostrarCarrito();
}

// Funci√≥n para eliminar un producto del carrito
function removeProduct(index) {
    carrito.splice(index, 1); // Eliminar el producto del carrito
    actualizarContador(); // Actualizar el contador
    mostrarCarrito(); // Volver a mostrar el carrito
}

// Event Listener para el bot√≥n de agregar al carrito
document.querySelector('#btnAgregar').addEventListener('click', agregarAlCarrito);

// Event Listener para el √≠cono del carrito
document.querySelector('.carrito-icono').addEventListener('click', mostrarCarrito);


////////////////////////////////////////////////////////AQUI INICIA MODAL PAGOS/////////////////////////////////////////////////////////////////////

function abrirMetodoPago() {
    if (carrito.length === 0) {
        Swal.fire({
            icon: 'warning',
            title: 'Carrito vac√≠o',
            text: 'No hay productos en el carrito para facturar.',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'Entendido'
        });
        return;
    }

    const total = carrito.reduce((sum, producto) => sum + producto.precio * producto.cantidad, 0);
    document.getElementById('totalPagar').value = `C$${total.toFixed(2)}`;

    const modalCarrito = bootstrap.Modal.getInstance(document.getElementById('mostarCarrito'));
    modalCarrito.hide();

    const modalPago = new bootstrap.Modal(document.getElementById('modalMetodoPago'));
    modalPago.show();

    const inputMonto = document.getElementById('montoRecibido');
    const inputCambio = document.getElementById('vueltoCliente');

    function calcularCambio() {
        const totalNum = parseFloat(document.getElementById('totalPagar').value.replace('C$', '').trim()) || 0;
        const recibido = parseFloat(inputMonto.value.trim()) || 0;
        const cambio = recibido - totalNum;
        inputCambio.value = cambio >= 0 ? `C$${cambio.toFixed(2)}` : 'C$0.00';
    }

    calcularCambio();
    inputMonto.removeEventListener('input', calcularCambio);
    inputMonto.addEventListener('input', calcularCambio);
}

// Limpiar los campos al cerrar el modal de m√©todo de pago
document.getElementById('modalMetodoPago').addEventListener('hidden.bs.modal', function () {
    document.getElementById('montoRecibido').value = '';
    document.getElementById('vueltoCliente').value = '';
});

function volverAlCarrito() {
    // Cerrar el modal de M√©todo de Pago
    const metodoPagoModal = bootstrap.Modal.getInstance(document.getElementById('modalMetodoPago'));
    if (metodoPagoModal) metodoPagoModal.hide();

    // Mostrar el modal del carrito
    const carritoModal = new bootstrap.Modal(document.getElementById('mostarCarrito'));
    carritoModal.show();
}





////////////////////////////////////////////////////////AQUI INICIA FACTURA/////////////////////////////////////////////////////////////////////

//////llamado al modal factura///////

// üëá Esta variable ahora debe ser insertada desde PHP antes de cargar este script
// const vendedorLogueado = 'Juan P√©rez'; ‚Üê Esta l√≠nea fue eliminada

function generarNumeroRecibo() {
    const ahora = new Date();
    return 'R' +
        ahora.getFullYear().toString().slice(-2) +
        (ahora.getMonth() + 1).toString().padStart(2, '0') +
        ahora.getDate().toString().padStart(2, '0') +
        ahora.getHours().toString().padStart(2, '0') +
        ahora.getMinutes().toString().padStart(2, '0') +
        ahora.getSeconds().toString().padStart(2, '0');
}

function alpargar() {
    const total = parseFloat(document.getElementById('totalPagar').value.replace('C$', '').trim()) || 0;
    const recibido = parseFloat(document.getElementById('montoRecibido').value.trim()) || 0;

    if (recibido < total) {
        Swal.fire({
            icon: 'error',
            title: 'Pago insuficiente',
            text: 'El monto recibido no puede ser menor al total a pagar.',
            confirmButtonColor: '#d33',
            confirmButtonText: 'Revisar'
        });
        return;
    }

    const metodoPagoModal = bootstrap.Modal.getInstance(document.getElementById('modalMetodoPago'));
    if (metodoPagoModal) {
        metodoPagoModal.hide();
    }

    const clienteNombre = carrito[0]?.clienteNombre || 'Cliente Gen√©rico';
    const clienteCedula = carrito[0]?.clienteCedula || '000-000000-0000X';
    const clienteId = carrito[0]?.clienteId || '';  // Aseg√∫rate de que carrito tiene el ID del cliente
    const fecha = new Date().toLocaleString();

    console.log('Cliente ID:', clienteId);  // Verifica en consola el ID del cliente

    // Si no hay cliente seleccionado, muestra un error
    if (!clienteId) {
        Swal.fire({
            icon: 'error',
            title: 'Faltan los datos del cliente',
            text: 'Por favor, selecciona un cliente antes de continuar.',
            confirmButtonColor: '#d33',
            confirmButtonText: 'Revisar'
        });
        return;
    }

    // Actualiza el ID del cliente en el campo oculto
    document.getElementById('facturaIDCliente').value = clienteId;  // Aqu√≠ asignas el ID del cliente

    document.getElementById('facturaFecha').textContent = fecha;
    document.getElementById('facturaCliente').textContent = `${clienteNombre} (${clienteCedula})`;

    const tabla = document.getElementById('tablaFacturaProductos');
    tabla.innerHTML = '';

    let totalFactura = 0;
    carrito.forEach(producto => {
        const subtotal = producto.precio * producto.cantidad;
        totalFactura += subtotal;

        const fila = `
            <tr>
                <td>${producto.nombreProducto}</td>
                <td>${producto.cantidad}</td>
                <td>C$${producto.precio.toFixed(2)}</td>
                <td>C$${subtotal.toFixed(2)}</td>
            </tr>
        `;
        tabla.innerHTML += fila;
    });

    document.getElementById('facturaTotal').textContent = totalFactura.toFixed(2);
    document.getElementById('facturaMetodoPago').textContent = document.getElementById('metodoPago').value;
    document.getElementById('facturaVuelto').textContent = document.getElementById('vueltoCliente').value;

    // Nuevos campos a√±adidos
    document.getElementById('facturaMontoRecibido').textContent = recibido.toFixed(2);
    document.getElementById('facturaNumeroRecibo').textContent = generarNumeroRecibo();
    document.getElementById('facturaVendedor').textContent = vendedorLogueado; // ahora llega desde PHP

    const facturaModal = new bootstrap.Modal(document.getElementById('modalFactura'));
    facturaModal.show();
}




function imprimirFactura() {
    const clienteId = document.getElementById('facturaIDCliente').value;
    const usuarioId = document.getElementById('facturaIDUsuario').value;

    console.log("Cliente ID:", clienteId);
    console.log("Vendedor ID:", usuarioId);


    // Aseg√∫rate de que los IDs est√©n presentes
    if (!clienteId || !usuarioId) {
        alert("Faltan los datos de Cliente o Vendedor.");
        return;
    }

    const datosFactura = {
        numero_factura: document.getElementById('facturaNumeroRecibo').textContent,
        fecha: document.getElementById('facturaFecha').textContent,
        metodo_pago: document.getElementById('facturaMetodoPago').textContent,
        subtotal: document.getElementById('facturaTotal').textContent.replace('C$', '').trim(), // üëà a√±adido aqu√≠
        total: document.getElementById('facturaTotal').textContent.replace('C$', '').trim(),
        monto_pagado: document.getElementById('facturaMontoRecibido').textContent.replace('C$', '').trim(),
        cambio: document.getElementById('facturaVuelto').textContent.replace('C$', '').trim(),
        ID_Cliente: clienteId,
        ID_Usuario: usuarioId
    };


    // Verificar si los campos est√°n vac√≠os
    const camposVacios = [];
    for (const campo in datosFactura) {
        if (!datosFactura[campo]) {
            camposVacios.push(campo);
        }
    }

    if (camposVacios.length > 0) {
        alert("Faltan los siguientes campos: " + camposVacios.join(', '));
        return;
    }

    // Enviar la solicitud al servidor
    fetch('../pages/Ctrl/guardar_factura.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(datosFactura)
    })
        .then(res => res.json())
        .then(respuesta => {
            if (respuesta.success) {
                const logoURL = '../assets/images-html/farmacia_batahola_circulo_sin_fondo.jpg';

                const facturaContenido = `
                <div style="font-family: monospace; font-size: 12px; width: 250px; position: relative;">
                    <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;
                               background-image: url('${logoURL}');
                               background-size: contain;
                               background-repeat: no-repeat;
                               background-position: center;
                               opacity: 0.85; z-index: 0;">
                    </div>

                    <div style="position: relative; z-index: 1;
                               background-color: rgba(255, 255, 255, 0.53);
                               padding: 20px 10px; border-radius: 5px;">
                        <div style="display: flex; justify-content: space-between; font-size: 12px; margin-bottom: 8px;">
                            <div><strong>Fecha:</strong> ${datosFactura.fecha}</div>
                            <div><strong>Recibo N¬∞:</strong> ${datosFactura.numero_factura}</div>
                        </div>

                        <div style="text-align: center; font-size: 18px; font-weight: bold; margin-bottom: 5px;">FACTURA</div>
                        <center>
                            <div style="font-size: 14px; font-weight: bold;">Farmacia Batahola</div>
                            Direcci√≥n: Managua, Nicaragua<br>
                            Tel: 8888-8888<br>
                            -------------------------------<br>
                            Cliente: ${document.getElementById('facturaCliente').textContent}<br>
                            Vendedor: ${document.getElementById('facturaVendedor').textContent}<br>
                            -------------------------------<br>
                        </center>

                        <table style="width: 100%; font-size: 12px; margin-top: 5px;">
                            <thead>
                                <tr>
                                    <th style="text-align: left;">Prod</th>
                                    <th style="text-align: center;">Cant</th>
                                    <th style="text-align: right;">P.U</th>
                                    <th style="text-align: right;">SubT</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${Array.from(document.querySelectorAll('#tablaFacturaProductos tr')).map(row => {
                    const cols = row.querySelectorAll('td');
                    return `
                                        <tr>
                                            <td>${cols[0].textContent}</td>
                                            <td style="text-align: center;">${cols[1].textContent}</td>
                                            <td style="text-align: right;">${cols[2].textContent}</td>
                                            <td style="text-align: right;">${cols[3].textContent}</td>
                                        </tr>`;
                }).join('')}
                            </tbody>
                        </table>
                        -------------------------------<br>
                        <strong>Total:</strong> C$${datosFactura.total}<br>
                        <strong>Pago:</strong> ${datosFactura.metodo_pago}<br>
                        <strong>Monto Recibido:</strong> C$${datosFactura.monto_pagado}<br>
                        <strong>Vuelto:</strong> C$${datosFactura.cambio}<br>
                        -------------------------------<br>
                        <center>¬°Gracias por su compra!</center>
                    </div>
                </div>
            `;

                // Cerramos modal
                const facturaModal = bootstrap.Modal.getInstance(document.getElementById('modalFactura'));
                if (facturaModal) facturaModal.hide();

                // Imprimimos
                const ventana = window.open('', '', 'width=300,height=600');
                ventana.document.write(`
                <html>
                    <head><title>Factura</title></head>
                    <body onload="window.print(); window.close();">
                        ${facturaContenido}
                    </body>
                </html>
            `);
                ventana.document.close();

                // Refrescamos la p√°gina despu√©s de 2 segundos
                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else {
                alert('‚ùå Error al guardar factura: ' + respuesta.message);
            }
        })
        .catch(err => {
            console.error("‚ùå Error en la solicitud:", err);
            alert("‚ùå No se pudo guardar la factura.");
        });
}




function volverAlMetodoPago() {
    const facturaModal = bootstrap.Modal.getInstance(document.getElementById('modalFactura'));
    if (facturaModal) facturaModal.hide();

    const metodoPagoModal = new bootstrap.Modal(document.getElementById('modalMetodoPago'));
    metodoPagoModal.show();
}


